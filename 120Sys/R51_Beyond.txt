The most important requirement is the system's stability on a high-level user application level, which is a consequence of basic network and terminal functionality availability. 
System failures caused by user operation or network malfunctions have to be avoided. A special help system must address dead ends in dialogs, and contextual understanding must be provided. The system must guide users throughout the interaction process quickly and effectively, and it has to be designed to avoid cognitive overloads caused by information overflow. 
The access point has to be controllable through different modalities. A switch between modalities must not affect the system operations; consequently, there should be no need to re-initiate the dialog status. Likewise, it should be possible to switch the current context without losing perspective if the system estimates it properly. 
General changing requirements and extensions 
There is an urgent need for the extensibility of the software system. The monolithic implementation used at the moment does not support the modeling of upcoming functionality requests, and it isn't easy to maintain and extend. Although the prototype complies with the specified functionality, we have decided to re-implement it from scratch and carefully design all application interfaces for process communications. 
Better development tools to handle the speech system on an abstract level are required to improve the process of extending its rule database. For better extensibility, context engines need to be implemented rather than interfaces, and the method of choice is neural networks. As for training purposes, new tools are needed and should be able to derive input from rule databases that are used at the moment. 

Usability related specifications 
Two major aspects are vital for accepting the terminal in public space applications. Firstly a solid user interface requires high standards in ergonomics and robustness. Secondly, the system needs to have a ``subtle notion'' of its services to guide users quickly and effectively. 
The terminal proactively offers its services, i.e., it must be able to attract and help people. It must be self-explicable and understand users' needs. It must also be able to handle context-specific dialogs. Dialogs that it needs to understand clearly should be handled properly to limit user frustration. Context switches must be supported at any session stage, and the system should offer alternatives and rank them by guessing their likelihood. 
The graphical and speech user interface need to complement each other. They represent input and output channels and provide access to the state of the context engine. The information flow must be compatible with average user capabilities to avoid cognitive overload. The graphical user interface model presents information abstractly two-dimensionally and supports virtual characters. 
Further points address training of the context engine, some of which have already been mentioned. 