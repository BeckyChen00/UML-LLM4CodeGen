Run 1 - codeBasedSys:
Based on the provided functional requirements for the teaching management system, I will create a Java implementation that includes classes for managing teacher data and course information, as well as methods for calculating salaries according to the specified rules. Below is the complete Java code:

```java
import java.util.ArrayList;
import java.util.List;

// Enum for Professional Title
enum ProfessionalTitle {
    FULL_PROFESSOR,
    ASSOCIATE_PROFESSOR,
    ASSISTANT_PROFESSOR
}

// Class representing a Teacher
class Teacher {
    private String teacherNumber;
    private String name;
    private String gender;
    private ProfessionalTitle title;
    private double basicSalary;
    private List<Course> courses;

    public Teacher(String teacherNumber, String name, String gender, ProfessionalTitle title, double basicSalary) {
        this.teacherNumber = teacherNumber;
        this.name = name;
        this.gender = gender;
        this.title = title;
        this.basicSalary = basicSalary;
        this.courses = new ArrayList<>();
    }

    public void addCourse(Course course) {
        courses.add(course);
    }

    public double calculateSalary() {
        double totalCourseFee = 0.0;
        for (Course course : courses) {
            totalCourseFee += course.calculateCourseFee(getCourseFeePerHour());
        }
        return basicSalary + totalCourseFee;
    }

    private double getCourseFeePerHour() {
        switch (title) {
            case FULL_PROFESSOR:
                return 100.0;
            case ASSOCIATE_PROFESSOR:
                return 80.0;
            case ASSISTANT_PROFESSOR:
                return 50.0;
            default:
                return 0.0;
        }
    }

    // Getters and Setters
    public String getTeacherNumber() {
        return teacherNumber;
    }

    public String getName() {
        return name;
    }

    public String getGender() {
        return gender;
    }

    public ProfessionalTitle getTitle() {
        return title;
    }

    public double getBasicSalary() {
        return basicSalary;
    }

    public List<Course> getCourses() {
        return courses;
    }
}

// Class representing a Course
class Course {
    private String courseNumber;
    private String courseName;
    private int credit;
    private int classHours;
    private boolean isCompulsory;

    public Course(String courseNumber, String courseName, int credit, int classHours, boolean isCompulsory) {
        this.courseNumber = courseNumber;
        this.courseName = courseName;
        this.credit = credit;
        this.classHours = classHours;
        this.isCompulsory = isCompulsory;
    }

    public double calculateCourseFee(double feePerHour) {
        int billedHours = isCompulsory ? classHours * 2 : classHours;
        return feePerHour * billedHours;
    }

    // Getters and Setters
    public String getCourseNumber() {
        return courseNumber;
    }

    public String getCourseName() {
        return courseName;
    }

    public int getCredit() {
        return credit;
    }

    public int getClassHours() {
        return classHours;
    }

    public boolean isCompulsory() {
        return isCompulsory;
    }
}

// Main class to demonstrate the functionality
public class TeachingManagementSystem {
    public static void main(String[] args) {
        // Create teachers
        Teacher teacher1 = new Teacher("T001", "Alice", "Female", ProfessionalTitle.FULL_PROFESSOR, 5000);
        Teacher teacher2 = new Teacher("T002", "Bob", "Male", ProfessionalTitle.ASSOCIATE_PROFESSOR, 4000);
        
        // Create courses
        Course course1 = new Course("C001", "Mathematics", 3, 10, true); // Compulsory
        Course course2 = new Course("C002", "History", 2, 5, false); // Elective
        
        // Assign courses to teachers
        teacher1.addCourse(course1);
        teacher1.addCourse(course2);
        teacher2.addCourse(course1);
        
        // Calculate and display salaries
        System.out.println("Salary of " + teacher1.getName() + ": $" + teacher1.calculateSalary());
        System.out.println("Salary of " + teacher2.getName() + ": $" + teacher2.calculateSalary());
    }
}
```

### Explanation of the Code:
1. **Enums**: `ProfessionalTitle` is an enumeration that defines the different professional titles a teacher can have.
2. **Teacher Class**: This class contains properties for teacher information and methods to add courses and calculate salary.
   - The `calculateSalary` method computes the total salary based on the basic salary and course fees.
3. **Course Class**: This class contains properties for course information and a method to calculate the course fee based on the type of course (compulsory or elective).
4. **Main Class**: The `TeachingManagementSystem` class demonstrates the functionality by creating instances of `Teacher` and `Course`, assigning courses to teachers, and calculating their salaries.

This implementation adheres to Java coding standards and best practices, including encapsulation, meaningful method names, and clear comments.
--------------------------------------------------
Run 2 - codeBasedSys:
Based on the provided functional requirements for the teaching management system, I will create a Java implementation that includes classes for managing teacher data and course information, as well as methods for calculating salaries according to the specified rules.

Here is the complete Java code:

```java
import java.util.ArrayList;
import java.util.List;

// Enum for Professional Title
enum ProfessionalTitle {
    FULL_PROFESSOR,
    ASSOCIATE_PROFESSOR,
    ASSISTANT_PROFESSOR
}

// Class representing a Teacher
class Teacher {
    private String teacherNumber;
    private String name;
    private String gender;
    private ProfessionalTitle title;
    private double basicSalary;

    public Teacher(String teacherNumber, String name, String gender, ProfessionalTitle title, double basicSalary) {
        this.teacherNumber = teacherNumber;
        this.name = name;
        this.gender = gender;
        this.title = title;
        this.basicSalary = basicSalary;
    }

    public String getTeacherNumber() {
        return teacherNumber;
    }

    public String getName() {
        return name;
    }

    public String getGender() {
        return gender;
    }

    public ProfessionalTitle getTitle() {
        return title;
    }

    public double getBasicSalary() {
        return basicSalary;
    }

    // Method to calculate salary based on courses taught
    public double calculateSalary(List<Course> courses) {
        double totalSalary = basicSalary;
        for (Course course : courses) {
            totalSalary += course.calculateCourseFee(this);
        }
        return totalSalary;
    }
}

// Class representing a Course
class Course {
    private String courseNumber;
    private String courseName;
    private int credit;
    private int classHours;
    private CourseType courseType;

    public Course(String courseNumber, String courseName, int credit, int classHours, CourseType courseType) {
        this.courseNumber = courseNumber;
        this.courseName = courseName;
        this.credit = credit;
        this.classHours = classHours;
        this.courseType = courseType;
    }

    public String getCourseNumber() {
        return courseNumber;
    }

    public String getCourseName() {
        return courseName;
    }

    public int getCredit() {
        return credit;
    }

    public int getClassHours() {
        return classHours;
    }

    public CourseType getCourseType() {
        return courseType;
    }

    // Method to calculate course fee based on teacher's title and course type
    public double calculateCourseFee(Teacher teacher) {
        double courseFeePerHour = 0;

        // Determine course fee per hour based on teacher's title
        switch (teacher.getTitle()) {
            case FULL_PROFESSOR:
                courseFeePerHour = 100;
                break;
            case ASSOCIATE_PROFESSOR:
                courseFeePerHour = 80;
                break;
            case ASSISTANT_PROFESSOR:
                courseFeePerHour = 50;
                break;
        }

        // Determine billed hours based on course type
        int billedHours = (courseType == CourseType.COMPULSORY) ? classHours * 2 : classHours;

        return courseFeePerHour * billedHours;
    }
}

// Enum for Course Type
enum CourseType {
    ELECTIVE,
    COMPULSORY
}

// Main class to demonstrate the functionality
public class TeachingManagementSystem {
    public static void main(String[] args) {
        // Create some teachers
        Teacher teacher1 = new Teacher("T001", "Alice", "Female", ProfessionalTitle.FULL_PROFESSOR, 5000);
        Teacher teacher2 = new Teacher("T002", "Bob", "Male", ProfessionalTitle.ASSOCIATE_PROFESSOR, 4000);
        Teacher teacher3 = new Teacher("T003", "Charlie", "Male", ProfessionalTitle.ASSISTANT_PROFESSOR, 3000);

        // Create some courses
        Course course1 = new Course("C001", "Mathematics", 3, 10, CourseType.COMPULSORY);
        Course course2 = new Course("C002", "Physics", 4, 5, CourseType.ELECTIVE);
        Course course3 = new Course("C003", "Chemistry", 3, 8, CourseType.COMPULSORY);

        // List of courses for each teacher
        List<Course> coursesForTeacher1 = new ArrayList<>();
        coursesForTeacher1.add(course1);
        coursesForTeacher1.add(course2);

        List<Course> coursesForTeacher2 = new ArrayList<>();
        coursesForTeacher2.add(course1);
        coursesForTeacher2.add(course3);

        List<Course> coursesForTeacher3 = new ArrayList<>();
        coursesForTeacher3.add(course2);
        coursesForTeacher3.add(course3);

        // Calculate and display salaries
        System.out.println("Salary of " + teacher1.getName() + ": $" + teacher1.calculateSalary(coursesForTeacher1));
        System.out.println("Salary of " + teacher2.getName() + ": $" + teacher2.calculateSalary(coursesForTeacher2));
        System.out.println("Salary of " + teacher3.getName() + ": $" + teacher3.calculateSalary(coursesForTeacher3));
    }
}
```

### Explanation of the Code:
1. **Enums**: `ProfessionalTitle` and `CourseType` are defined to represent the professional titles of teachers and types of courses, respectively.
2. **Teacher Class**: Contains properties for teacher data and a method to calculate the salary based on the courses taught.
3. **Course Class**: Contains properties for course information and a method to calculate the course fee based on the teacher's title and course type.
4. **Main Class**: Demonstrates the functionality by creating instances of `Teacher` and `Course`, calculating salaries, and printing them.

This implementation adheres to the functional requirements and follows Java coding standards.
--------------------------------------------------
